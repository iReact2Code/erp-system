// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  CLERK
  SUPERVISOR
  THIRD_PARTY_CLIENT
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum OrderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  hashedPassword String
  role           UserRole
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  // Relations
  sales          Sale[]
  purchases      Purchase[]
  orders         Order[]
  createdItems   InventoryItem[] @relation("CreatedBy")
  updatedItems   InventoryItem[] @relation("UpdatedBy")
}

model InventoryItem {
  id            String         @id @default(cuid())
  name          String
  sku           String         @unique
  description   String?
  quantity      Int            @default(0)
  unitPrice     Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   String
  updatedById   String
  // Relations
  createdBy     User           @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy     User           @relation("UpdatedBy", fields: [updatedById], references: [id])
  saleItems     SaleItem[]
  purchaseItems PurchaseItem[]
  orderItems    OrderItem[]

  @@index([createdAt], map: "idx_inventoryitem_created_at")
  @@index([name], map: "idx_inventoryitem_name")
  @@index([description], map: "idx_inventoryitem_description")
  @@index([createdAt, id], map: "idx_inventoryitem_created_at_id")
}

model Sale {
  id        String     @id @default(cuid())
  saleDate  DateTime   @default(now())
  total     Float
  status    String // pending, completed, cancelled
  userId    String
  // Relations
  user      User       @relation(fields: [userId], references: [id])
  items     SaleItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model SaleItem {
  id              String        @id @default(cuid())
  quantity        Int
  unitPrice       Float
  total           Float
  saleId          String
  inventoryItemId String
  // Relations
  sale            Sale          @relation(fields: [saleId], references: [id])
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
}

model Purchase {
  id           String         @id @default(cuid())
  purchaseDate DateTime       @default(now())
  total        Float
  status       String // pending, approved, rejected, completed
  userId       String
  // Relations
  user         User           @relation(fields: [userId], references: [id])
  items        PurchaseItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model PurchaseItem {
  id              String        @id @default(cuid())
  quantity        Int
  unitPrice       Float
  total           Float
  purchaseId      String
  inventoryItemId String
  // Relations
  purchase        Purchase      @relation(fields: [purchaseId], references: [id])
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  customerName    String
  customerEmail   String
  customerPhone   String?
  customerAddress String?
  status          OrderStatus   @default(DRAFT)
  priority        OrderPriority @default(NORMAL)
  orderDate       DateTime      @default(now())
  requiredDate    DateTime?
  shippedDate     DateTime?
  deliveredDate   DateTime?
  subtotal        Float         @default(0)
  taxAmount       Float         @default(0)
  shippingAmount  Float         @default(0)
  discountAmount  Float         @default(0)
  totalAmount     Float         @default(0)
  notes           String?
  internalNotes   String?
  userId          String
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("orders")
}

model OrderItem {
  id              String        @id @default(cuid())
  quantity        Int
  unitPrice       Float
  discount        Float         @default(0)
  total           Float
  notes           String?
  orderId         String
  inventoryItemId String
  // Relations
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("order_items")
}
